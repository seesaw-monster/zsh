# 環境変数 ---------------------------------
export HISTSIZE=10000
# エイリアス -------------------------------
# sudoにaliasしたコマンドを実行
alias sudo='sudo '
# 同様にnohupにも
alias nohup='nohup '
# 色付け
alias ll='ls -lGF'
alias ls='ls -GF'
# 再起コピー
alias cpr='cp -r'
# Neovim
alias vi='nvim'
# ファイル移動
alias cnvim='cd ~/.config/nvim'
alias czsh='cd ~/.config/zsh/'
# python
alias python='python3'
alias pip='pip3'
alias py='python3'
# git
alias g='git'
alias ga='git add'
alias gd='git diff'
alias gs='git status'
alias gpush='git push'
alias gpull='git pull'
alias gb='git branch'
alias gch='git checkout'
alias gchb='git checkout -b'
alias gf='git fetch'
alias gc='git commit'
alias gm='git merge'
# AtCode
function test-case () { oj t -c "python3 $@" -d ./tests/}
function teisyutu () { acc s "$@" -- --guess-python-interpreter pypy -w 0 -y}

# mkdir と cd を同時に実行するコマンド mkcd の定義
function mkcd () { mkdir -p "$@" && eval cd "\"\$$#\""; }

# 退勤時刻の計算
taikin() {
  if [[ -z "$1" ]]; then
    echo "使用方法: taikin HH:MM"
    return 1
  fi

  # 入力が HH:MM の形式か確認
  if [[ "$1" =~ ^([01]?[0-9]|2[0-3]):[0-5][0-9]$ ]]; then
    # 現在の日付と入力された時刻を使って日時を構築し、8時間30分遅らせる
    result=$(date -d "$1 today +8 hours +30 minutes" +"%H:%M" 2>/dev/null)
    if [[ $? -ne 0 ]]; then
      echo "無効な時刻です: $1"
      return 1
    fi
    echo "$result"
  else
    echo "時刻は HH:MM の形式で入力してください"
    return 1
  fi
}

# fuzzy finder
source <(fzf --zsh)

# プラグイン管理
source $ZPLUG_HOME/init.zsh
# 自身を管理
zplug "zplug/zplug", hook-build:'zplug --self-manage'

# コマンド補完
zplug "zsh-users/zsh-completions"
# 過去のコマンドを自動的に補完
zplug "zsh-users/zsh-autosuggestions"
# コマンドの色付け
zplug "zsh-users/zsh-syntax-highlighting"
# 仕えていない alias を指摘
zplug "MichaelAquilina/zsh-you-should-use"
# bat
zplug "fdellwing/zsh-bat"
# zsh theme
zplug romkatv/powerlevel10k, as:theme, depth:1

# なければインストール
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

zplug load

zstyle ':completion:*' matcher 'm:{a-z}={A-Z}'

# peco用設定 ----------------------------------------------------------------
# コマンド検索履歴
function peco-history-selection(){
        BUFFER=`history -n 1 | tac | awk '!a[$0]++' | peco`
        CURSOR=$#BUFFER
        zle reset-prompt
}
zle -N peco-history-selection
bindkey '^R' peco-history-selection

## カレントディレクトリ以下のディレクトリ検索・移動
function find_cd() {
    local selected_dir=$(find . -type d | peco)
    if [ -n "$selected_dir" ]; then
        BUFFER="cd ${selected_dir}"
        zle accept-line
    fi
}
zle -N find_cd
bindkey '^X' find_cd

# git-autosuggestions 用設定 ---------------------------------------------------
bindkey '^l' autosuggest-accept
# ------------------------------------------------------------------------------
